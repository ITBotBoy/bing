{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport axios from 'axios';\nimport { useState, useEffect, useRef } from 'react';\nimport '../styles/index.scss';\nimport moment from 'moment';\nimport Head from \"../components/Head\";\nimport DownDialog from \"../components/downDialog\";\nimport throttle from 'lodash/throttle';\nimport { Spin } from \"antd\";\n/*export default class Page extends React.Component {\r\n    componentDidMount () {\r\n        likeFun()\r\n    }\r\n    render (){\r\n        return PageFun()\r\n    }\r\n}*/\n\nexport default function () {\n  const {\n    0: downDialogVisible,\n    1: setDownDialogVisible\n  } = useState(false);\n  const {\n    0: list,\n    1: updateList\n  } = useState([]);\n  const {\n    0: img,\n    1: updateImg\n  } = useState({});\n  const {\n    0: nextDate,\n    1: updateNextDate\n  } = useState(0);\n  const {\n    0: loading,\n    1: updateLoading\n  } = useState(false);\n  const {\n    0: isMobile,\n    1: setIsMobile\n  } = useState(false);\n  const {\n    0: showTop,\n    1: setShowTop\n  } = useState(false);\n  const {\n    0: isEmpty,\n    1: setEmpty\n  } = useState(false);\n  const {\n    0: sortInfo,\n    1: setSortInfo\n  } = useState({});\n  const {\n    0: likeList,\n    1: setLikeList\n  } = useState([]);\n\n  const checkMode = () => {\n    if (window.innerWidth < 1024 || window.innerWidth < window.innerHeight) {\n      setIsMobile(true);\n      return true;\n    }\n\n    setIsMobile(false);\n    return false;\n  };\n\n  const likeFun = data => {\n    let localLikeList = window.localStorage.getItem('localLikeList');\n\n    if (!likeList.length && localLikeList) {\n      setLikeList(JSON.parse(localLikeList));\n    }\n\n    if (data) {\n      localLikeList = localLikeList ? JSON.parse(localLikeList) : [];\n\n      if (!localLikeList.includes(data)) {\n        axios(`/api/sort?date=${data}&k=likeCount`).then(res => {\n          if (res.data.likeCount) {\n            if (!sortInfo[data]) {\n              sortInfo[data] = {\n                likeCount: 0\n              };\n            }\n\n            sortInfo[data].likeCount = res.data.likeCount;\n            setSortInfo(sortInfo);\n            localLikeList.push(data);\n            setLikeList(localLikeList);\n            window.localStorage.setItem('localLikeList', JSON.stringify(localLikeList));\n          }\n        });\n      }\n    }\n  };\n\n  const throttleLikeFun = throttle(data => likeFun(data), 1500);\n\n  if (false && window) {\n    likeFun();\n  }\n\n  const downloadFun = data => {\n    if (data) {\n      axios(`/api/sort?date=${data}&k=downloadCount`).then(res => {\n        if (res.data.likeCount) {\n          if (!sortInfo[data]) {\n            sortInfo[data] = {\n              downloadCount: 0\n            };\n          }\n\n          sortInfo[data].downloadCount = res.data.downloadCount;\n          setSortInfo(sortInfo);\n        }\n      });\n    }\n  };\n\n  const queryList = (nextDate, isMobile) => {\n    updateLoading(true);\n    axios(`/api/list?date=${nextDate}&count=10`).then(({\n      data\n    }) => {\n      let count = 0;\n      const maxCount = isMobile ? 0 : 2;\n      data.data.forEach((item, i) => {\n        let span = 1; //0 1 2\n\n        count < maxCount && maxCount && (span = Math.ceil(Math.random() * 2)); // 2,第9张换span  ;  1 最后一张span ;\n\n        maxCount - count === 10 - i && maxCount && (span = 2); // count=1 ; count=2 ;\n\n        span === 2 && (count += 1);\n        item.style = {\n          gridColumnStart: `span ${span}`,\n          gridRowStart: `span ${span}`\n        };\n        item.dateStr = moment(item.date, 'YYYYMMDD').format('YY.MM.DD');\n        item.span = span;\n      });\n      const last = data.data.last();\n      updateList([...list, ...data.data]);\n      !last.prev && setEmpty(true);\n      updateNextDate(last.prev);\n      updateLoading(false);\n    });\n  };\n\n  const $page = useRef();\n  useEffect(e => {\n    window.onscroll = throttle(() => {\n      if (loading || isEmpty) {\n        return;\n      }\n\n      setShowTop(document.documentElement.scrollTop > 700);\n      let scrollTop = document.documentElement.scrollTop;\n      let clientHeight = document.documentElement.clientHeight;\n      let pageHeight = $page.current.clientHeight;\n\n      if (scrollTop && clientHeight + scrollTop + 120 > pageHeight) {\n        queryList(nextDate, isMobile);\n      }\n    }, 100);\n    window.onscroll();\n  }, [nextDate, loading]);\n  useEffect(() => {\n    const isMobile = checkMode();\n\n    Array.prototype.last = function () {\n      return this[this.length - 1];\n    };\n\n    axios(`/api/sort`).then(res => {\n      setSortInfo(res.data);\n    });\n    queryList(nextDate, isMobile);\n  }, []);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: `index-page ${isMobile && 'mobile-page'}`,\n    ref: $page,\n    children: [/*#__PURE__*/_jsx(Head, {}), /*#__PURE__*/_jsx(\"div\", {\n      className: \"img-list\",\n      style: {\n        gridTemplateRows: isMobile ? `repeat(${list.length}, 75vw)` : `repeat(${parseInt(list.length / 10) * 4}, 19vw)`\n      },\n      children: list.map(img => /*#__PURE__*/_jsxs(\"div\", {\n        className: \"img-item\",\n        style: img.style,\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"cover\",\n          children: [/*#__PURE__*/_jsx(\"a\", {\n            className: \"iconfont icon-fangda actionBtn\",\n            href: `/${img.date}`\n          }), /*#__PURE__*/_jsx(\"span\", {\n            className: \"text\",\n            children: img.cp\n          })]\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: `date-str size-${img.span}`,\n          children: img.dateStr\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"img-bg\",\n          style: {\n            backgroundImage: `url('//cn.bing.com${img.urlbase}_${false ? '768x1280' : '1024x768'}.jpg')`\n          }\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"handleButton\",\n          children: [/*#__PURE__*/_jsx(\"span\", {\n            className: (likeList.includes(img.date) ? 'icon-like-fill' : 'icon-xihuan') + ' iconfont',\n            onClick: () => {\n              throttleLikeFun(img.date);\n            },\n            children: /*#__PURE__*/_jsx(\"span\", {\n              className: \"count\",\n              children: sortInfo[img.date] && sortInfo[img.date].likeCount || 0\n            })\n          }), /*#__PURE__*/_jsx(\"span\", {\n            onClick: () => {\n              setDownDialogVisible(true);\n              updateImg(img);\n            },\n            className: \"iconfont icon-download\",\n            children: /*#__PURE__*/_jsx(\"span\", {\n              className: \"count\",\n              children: sortInfo[img.date] && sortInfo[img.date].downloadCount || 0\n            })\n          })]\n        })]\n      }, img.date))\n    }), isEmpty && /*#__PURE__*/_jsx(\"div\", {\n      className: \"empty-text\",\n      children: \"\\u2014\\u2014 \\u5230\\u5E95\\u5566 \\u2014\\u2014\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      className: \"right-btn\",\n      children: [/*#__PURE__*/_jsx(\"div\", {\n        className: `to-top iconfont icon-arrow-left ${!showTop && 'hide'}`,\n        onClick: () => window.scrollTo(0, 0)\n      }), /*#__PURE__*/_jsx(\"a\", {\n        className: \"iconfont icon-touzi\",\n        href: \"/random\"\n      })]\n    }), /*#__PURE__*/_jsx(DownDialog, {\n      downloadFun: downloadFun,\n      isMobile: isMobile,\n      visible: downDialogVisible,\n      onHide: () => {\n        setDownDialogVisible(false);\n        updateImg({});\n      },\n      imgInfo: img\n    })]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}