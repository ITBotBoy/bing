{"ast":null,"code":"const jsonfile = require('jsonfile');\n\nconst moment = require('moment');\n\nconst cloneDeep = require('lodash/cloneDeep');\n\nlet delayFun;\nexport default (async (req, res) => {\n  let {\n    k = 0,\n    date\n  } = req.query;\n\n  if (!global.sortInfo) {\n    try {\n      global.sortInfo = await jsonfile.readFileSync('bing_data/sortData.json').catch(() => ({}));\n    } catch (e) {\n      try {\n        await isFileExisted(path); // 存在文件不处理 global.sortInfo 赋值, 返回失败\n      } catch (e) {\n        // 如果不存在直接赋值\n        global.sortInfo = [];\n      }\n    }\n  }\n\n  if (!global.sortInfo) return res.json({});\n  const sortInfo = cloneDeep(global.sortInfo);\n\n  if (date && k) {\n    //延迟一小时执行\n    if (!sortInfo[date]) {\n      sortInfo[date] = {};\n      sortInfo[date][k] = 1;\n    } else {\n      sortInfo[date][k] = (sortInfo[date][k] || 0) + 1;\n    }\n\n    delayFun && clearTimeout(delayFun);\n    delayFun = setTimeout(() => {\n      delayFun = null;\n      const nowStr = moment().format('YYYY-MM-DD HH:mm:ss');\n      sortInfo['nowStr'] = nowStr;\n      jsonfile.writeFileSync('bing_data/sortData.json', sortInfo);\n    }, 60 * 60 * 1000);\n    global.sortInfo = cloneDeep(sortInfo);\n    res.json(sortInfo[date]);\n  } else {\n    res.json(sortInfo);\n  }\n});","map":{"version":3,"sources":["E:/Future/bing/pages/api/sort.js"],"names":["jsonfile","require","moment","cloneDeep","delayFun","req","res","k","date","query","global","sortInfo","readFileSync","catch","e","isFileExisted","path","json","clearTimeout","setTimeout","nowStr","format","writeFileSync"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,SAAS,GAAEF,OAAO,CAAC,kBAAD,CAAxB;;AACA,IAAIG,QAAJ;AACA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,MAAI;AAAEC,IAAAA,CAAC,GAAG,CAAN;AAASC,IAAAA;AAAT,MAAiBH,GAAG,CAACI,KAAzB;;AACA,MAAG,CAACC,MAAM,CAACC,QAAX,EAAoB;AAChB,QAAI;AACAD,MAAAA,MAAM,CAACC,QAAP,GAAkB,MAAMX,QAAQ,CAACY,YAAT,CAAsB,yBAAtB,EACnBC,KADmB,CACb,OAAO,EAAP,CADa,CAAxB;AAEH,KAHD,CAGC,OAAOC,CAAP,EAAU;AACP,UAAI;AACA,cAAMC,aAAa,CAACC,IAAD,CAAnB,CADA,CAEA;AACH,OAHD,CAGC,OAAOF,CAAP,EAAU;AACP;AACAJ,QAAAA,MAAM,CAACC,QAAP,GAAgB,EAAhB;AACH;AACJ;AACJ;;AACD,MAAG,CAACD,MAAM,CAACC,QAAX,EAAqB,OAAOL,GAAG,CAACW,IAAJ,CAAS,EAAT,CAAP;AACrB,QAAMN,QAAQ,GAACR,SAAS,CAACO,MAAM,CAACC,QAAR,CAAxB;;AACA,MAAGH,IAAI,IAAID,CAAX,EAAa;AACT;AACA,QAAG,CAACI,QAAQ,CAACH,IAAD,CAAZ,EAAmB;AACfG,MAAAA,QAAQ,CAACH,IAAD,CAAR,GAAe,EAAf;AACAG,MAAAA,QAAQ,CAACH,IAAD,CAAR,CAAeD,CAAf,IAAkB,CAAlB;AACH,KAHD,MAGM;AACFI,MAAAA,QAAQ,CAACH,IAAD,CAAR,CAAeD,CAAf,IAAkB,CAACI,QAAQ,CAACH,IAAD,CAAR,CAAeD,CAAf,KAAqB,CAAtB,IAAyB,CAA3C;AACH;;AACDH,IAAAA,QAAQ,IAAIc,YAAY,CAACd,QAAD,CAAxB;AACAA,IAAAA,QAAQ,GAACe,UAAU,CAAC,MAAI;AACpBf,MAAAA,QAAQ,GAAC,IAAT;AACA,YAAMgB,MAAM,GAAGlB,MAAM,GAAGmB,MAAT,CAAgB,qBAAhB,CAAf;AACAV,MAAAA,QAAQ,CAAC,QAAD,CAAR,GAAmBS,MAAnB;AACApB,MAAAA,QAAQ,CAACsB,aAAT,CAAuB,yBAAvB,EAAiDX,QAAjD;AACH,KALkB,EAKjB,KAAG,EAAH,GAAM,IALW,CAAnB;AAMAD,IAAAA,MAAM,CAACC,QAAP,GAAgBR,SAAS,CAACQ,QAAD,CAAzB;AACAL,IAAAA,GAAG,CAACW,IAAJ,CAASN,QAAQ,CAACH,IAAD,CAAjB;AACH,GAjBD,MAiBM;AACFF,IAAAA,GAAG,CAACW,IAAJ,CAASN,QAAT;AACH;AACJ,CAtCD","sourcesContent":["const jsonfile = require('jsonfile')\r\nconst moment = require('moment');\r\nconst cloneDeep= require('lodash/cloneDeep')\r\nlet delayFun;\r\nexport default async (req, res) => {\r\n    let { k = 0 ,date} = req.query;\r\n    if(!global.sortInfo){\r\n        try {\r\n            global.sortInfo = await jsonfile.readFileSync('bing_data/sortData.json')\r\n                .catch(() => ({}))\r\n        }catch (e) {\r\n            try {\r\n                await isFileExisted(path);\r\n                // 存在文件不处理 global.sortInfo 赋值, 返回失败\r\n            }catch (e) {\r\n                // 如果不存在直接赋值\r\n                global.sortInfo=[]\r\n            }\r\n        }\r\n    }\r\n    if(!global.sortInfo) return res.json({})\r\n    const sortInfo=cloneDeep(global.sortInfo)\r\n    if(date && k){\r\n        //延迟一小时执行\r\n        if(!sortInfo[date]){\r\n            sortInfo[date]={}\r\n            sortInfo[date][k]=1\r\n        }else {\r\n            sortInfo[date][k]=(sortInfo[date][k] || 0)+1\r\n        }\r\n        delayFun && clearTimeout(delayFun);\r\n        delayFun=setTimeout(()=>{\r\n            delayFun=null\r\n            const nowStr = moment().format('YYYY-MM-DD HH:mm:ss');\r\n            sortInfo['nowStr']=nowStr\r\n            jsonfile.writeFileSync('bing_data/sortData.json',sortInfo)\r\n        },60*60*1000)\r\n        global.sortInfo=cloneDeep(sortInfo)\r\n        res.json(sortInfo[date])\r\n    }else {\r\n        res.json(sortInfo)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}