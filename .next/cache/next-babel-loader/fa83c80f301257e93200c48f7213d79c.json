{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _nodeHtmlParser = require(\"node-html-parser\");\n\nvar _constants = require(\"./constants\");\n\nvar MIDDLEWARE_TIME_BUDGET = 10;\nvar MAXIMUM_IMAGE_PRELOADS = 2;\nvar IMAGE_PRELOAD_SIZE_THRESHOLD = 2500;\nvar middlewareRegistry = [];\n\nfunction registerPostProcessor(name, middleware, condition) {\n  middlewareRegistry.push({\n    name: name,\n    middleware: middleware,\n    condition: condition || null\n  });\n}\n\nfunction processHTML(_x, _x2, _x3) {\n  return _processHTML.apply(this, arguments);\n}\n\nfunction _processHTML() {\n  _processHTML = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(html, data, options) {\n    var postProcessData, root, document, callMiddleWare, _callMiddleWare, i, middleware;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _callMiddleWare = function _callMiddleWare3() {\n              _callMiddleWare = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(middleware, name) {\n                var timer, inspectTime;\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        timer = Date.now();\n                        middleware.inspect(root, postProcessData, data);\n                        inspectTime = Date.now() - timer;\n                        _context3.next = 5;\n                        return middleware.mutate(document, postProcessData, data);\n\n                      case 5:\n                        document = _context3.sent;\n                        timer = Date.now() - timer;\n\n                        if (timer > MIDDLEWARE_TIME_BUDGET) {\n                          console.warn(\"The postprocess middleware \\\"\".concat(name, \"\\\" took \").concat(timer, \"ms(\").concat(inspectTime, \", \").concat(timer - inspectTime, \") to complete. This is longer than the \").concat(MIDDLEWARE_TIME_BUDGET, \" limit.\"));\n                        }\n\n                        return _context3.abrupt(\"return\");\n\n                      case 9:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n              return _callMiddleWare.apply(this, arguments);\n            };\n\n            callMiddleWare = function _callMiddleWare2(_x9, _x10) {\n              return _callMiddleWare.apply(this, arguments);\n            };\n\n            if (middlewareRegistry[0]) {\n              _context4.next = 4;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", html);\n\n          case 4:\n            postProcessData = {\n              preloads: {\n                images: []\n              }\n            };\n            root = (0, _nodeHtmlParser.parse)(html);\n            document = html; // Calls the middleware, with some instrumentation and logging\n\n            i = 0;\n\n          case 8:\n            if (!(i < middlewareRegistry.length)) {\n              _context4.next = 16;\n              break;\n            }\n\n            middleware = middlewareRegistry[i];\n\n            if (!(!middleware.condition || middleware.condition(options))) {\n              _context4.next = 13;\n              break;\n            }\n\n            _context4.next = 13;\n            return callMiddleWare(middlewareRegistry[i].middleware, middlewareRegistry[i].name);\n\n          case 13:\n            i++;\n            _context4.next = 8;\n            break;\n\n          case 16:\n            return _context4.abrupt(\"return\", document);\n\n          case 17:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _processHTML.apply(this, arguments);\n}\n\nvar FontOptimizerMiddleware = /*#__PURE__*/function () {\n  function FontOptimizerMiddleware() {\n    var _this = this;\n\n    _classCallCheck(this, FontOptimizerMiddleware);\n\n    this.fontDefinitions = [];\n\n    this.mutate = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(markup, _data, options) {\n        var result, key, url, fontContent;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                result = markup;\n\n                if (options.getFontDefinition) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", markup);\n\n              case 3:\n                _context.t0 = _regeneratorRuntime.keys(_this.fontDefinitions);\n\n              case 4:\n                if ((_context.t1 = _context.t0()).done) {\n                  _context.next = 13;\n                  break;\n                }\n\n                key = _context.t1.value;\n                url = _this.fontDefinitions[key];\n\n                if (!(result.indexOf(\"<style data-href=\\\"\".concat(url, \"\\\">\")) > -1)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"continue\", 4);\n\n              case 9:\n                fontContent = options.getFontDefinition(url);\n                result = result.replace('</head>', \"<style data-href=\\\"\".concat(url, \"\\\">\").concat(fontContent, \"</style></head>\"));\n                _context.next = 4;\n                break;\n\n              case 13:\n                return _context.abrupt(\"return\", result);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x4, _x5, _x6) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  _createClass(FontOptimizerMiddleware, [{\n    key: \"inspect\",\n    value: function inspect(originalDom, _data, options) {\n      var _this2 = this;\n\n      if (!options.getFontDefinition) {\n        return;\n      } // collecting all the requested font definitions\n\n\n      originalDom.querySelectorAll('link').filter(function (tag) {\n        return tag.getAttribute('rel') === 'stylesheet' && tag.hasAttribute('data-href') && _constants.OPTIMIZED_FONT_PROVIDERS.some(function (url) {\n          var dataHref = tag.getAttribute('data-href');\n          return dataHref ? dataHref.startsWith(url) : false;\n        });\n      }).forEach(function (element) {\n        var url = element.getAttribute('data-href');\n\n        if (url) {\n          _this2.fontDefinitions.push(url);\n        }\n      });\n    }\n  }]);\n\n  return FontOptimizerMiddleware;\n}();\n\nvar ImageOptimizerMiddleware = /*#__PURE__*/function () {\n  function ImageOptimizerMiddleware() {\n    _classCallCheck(this, ImageOptimizerMiddleware);\n\n    this.mutate = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(markup, _data) {\n        var result, imagePreloadTags;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                result = markup;\n                imagePreloadTags = _data.preloads.images.filter(function (imgHref) {\n                  return !preloadTagAlreadyExists(markup, imgHref);\n                }).reduce(function (acc, imgHref) {\n                  return acc + \"<link rel=\\\"preload\\\" href=\\\"\".concat(imgHref, \"\\\" as=\\\"image\\\"/>\");\n                }, '');\n                return _context2.abrupt(\"return\", result.replace(/<link rel=\"preload\"/, \"\".concat(imagePreloadTags, \"<link rel=\\\"preload\\\"\")));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x7, _x8) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n\n  _createClass(ImageOptimizerMiddleware, [{\n    key: \"inspect\",\n    value: function inspect(originalDom, _data) {\n      var imgElements = originalDom.querySelectorAll('img');\n      var eligibleImages = [];\n\n      for (var i = 0; i < imgElements.length; i++) {\n        if (isImgEligible(imgElements[i])) {\n          eligibleImages.push(imgElements[i]);\n        }\n\n        if (eligibleImages.length >= MAXIMUM_IMAGE_PRELOADS) {\n          break;\n        }\n      }\n\n      _data.preloads.images = [];\n\n      for (var _i = 0, _eligibleImages = eligibleImages; _i < _eligibleImages.length; _i++) {\n        var imgEl = _eligibleImages[_i];\n        var src = imgEl.getAttribute('src');\n\n        if (src) {\n          _data.preloads.images.push(src);\n        }\n      }\n    }\n  }]);\n\n  return ImageOptimizerMiddleware;\n}();\n\nfunction isImgEligible(imgElement) {\n  var imgSrc = imgElement.getAttribute('src');\n  return !!imgSrc && sourceIsSupportedType(imgSrc) && imageIsNotTooSmall(imgElement) && imageIsNotHidden(imgElement);\n}\n\nfunction preloadTagAlreadyExists(html, href) {\n  var regex = new RegExp(\"<link[^>]*href[^>]*\".concat(href));\n  return html.match(regex);\n}\n\nfunction imageIsNotTooSmall(imgElement) {\n  // Skip images without both height and width--we don't know enough to say if\n  // they are too small\n  if (!(imgElement.hasAttribute('height') && imgElement.hasAttribute('width'))) {\n    return true;\n  }\n\n  try {\n    var heightAttr = imgElement.getAttribute('height');\n    var widthAttr = imgElement.getAttribute('width');\n\n    if (!heightAttr || !widthAttr) {\n      return true;\n    }\n\n    if (parseInt(heightAttr) * parseInt(widthAttr) <= IMAGE_PRELOAD_SIZE_THRESHOLD) {\n      return false;\n    }\n  } catch (err) {\n    return true;\n  }\n\n  return true;\n} // Traverse up the dom from each image to see if it or any of it's\n// ancestors have the hidden attribute.\n\n\nfunction imageIsNotHidden(imgElement) {\n  var activeElement = imgElement;\n\n  while (activeElement.parentNode) {\n    if (activeElement.hasAttribute('hidden')) {\n      return false;\n    }\n\n    activeElement = activeElement.parentNode;\n  }\n\n  return true;\n} // Currently only filters out svg images--could be made more specific in the future.\n\n\nfunction sourceIsSupportedType(imgSrc) {\n  return !imgSrc.includes('.svg');\n} // Initialization\n\n\nregisterPostProcessor('Inline-Fonts', new FontOptimizerMiddleware(), // Using process.env because passing Experimental flag through loader is not possible.\n// @ts-ignore\nfunction (options) {\n  return options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS;\n});\nregisterPostProcessor('Preload Images', new ImageOptimizerMiddleware(), // @ts-ignore\nfunction (options) {\n  return options.optimizeImages || process.env.__NEXT_OPTIMIZE_IMAGES;\n});\nvar _default = processHTML;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}